name: Deploy Dashboard to Vercel

on:
  push:
    branches:
      - Push-to-vercel
  workflow_dispatch:
  # Run after the scraper workflow completes
  workflow_run:
    workflows: ["University Admissions Scraper"]
    types:
      - completed

jobs:
  scrape-and-prepare:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install aiohttp beautifulsoup4
          
      - name: Run scraper if triggered manually
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Manual trigger detected, running scraper..."
          mkdir -p data
          
          # Check if universities.json exists
          if [ ! -f "data/universities.json" ]; then
            echo "Creating sample universities.json file..."
            echo '[{"name":"Harvard University","url":"https://college.harvard.edu/admissions"},{"name":"MIT","url":"https://www.admissions.mit.edu"}]' > data/universities.json
          fi
          
          # Run the scraper
          python main.py
          
      - name: Check for admissions data
        id: check-data
        run: |
          mkdir -p data
          if [ -f "data/admissions_data.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Found existing admissions data file"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No admissions data file found. Creating sample data file..."
            echo '[{"name":"Harvard University","url":"https://college.harvard.edu/admissions","courses":["Sample Course"],"admissions_requirements":["Sample Requirement"],"application_deadlines":["Sample Deadline"],"scraped_at":"2025-05-11 12:34:56"}]' > data/admissions_data.json
          fi

      - name: Prepare dashboard for deployment
        run: |
          # Create deployment directory
          mkdir -p vercel-dashboard
          
          # Copy dashboard files
          if [ -d "dashboard" ]; then
            cp -r dashboard/* vercel-dashboard/
          else
            # Create basic dashboard if none exists
            cat << EOF > vercel-dashboard/index.html
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>University Admissions Dashboard</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            </head>
            <body>
              <div class="container py-5">
                <h1 class="mb-4">University Admissions Dashboard</h1>
                <div class="row">
                  <div class="col-md-6">
                    <div class="card mb-4">
                      <div class="card-header">Universities</div>
                      <div class="card-body">
                        <div id="university-list"></div>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="card mb-4">
                      <div class="card-header">Data Completion</div>
                      <div class="card-body">
                        <canvas id="completion-chart"></canvas>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <script>
                // Load data
                fetch('data/admissions_data.json')
                  .then(response => response.json())
                  .then(data => {
                    // Display university list
                    const listElem = document.getElementById('university-list');
                    data.forEach(uni => {
                      const div = document.createElement('div');
                      div.classList.add('mb-3', 'p-3', 'border', 'rounded');
                      div.innerHTML = \`
                        <h5>\${uni.name}</h5>
                        <p class="small text-muted">\${uni.url}</p>
                        <div class="mt-2">
                          <span class="badge bg-primary me-1">Courses: \${uni.courses ? uni.courses.length : 0}</span>
                          <span class="badge bg-success me-1">Requirements: \${uni.admissions_requirements ? uni.admissions_requirements.length : 0}</span>
                          <span class="badge bg-info">Deadlines: \${uni.application_deadlines ? uni.application_deadlines.length : 0}</span>
                        </div>
                      \`;
                      listElem.appendChild(div);
                    });
                    
                    // Setup chart
                    const ctx = document.getElementById('completion-chart').getContext('2d');
                    new Chart(ctx, {
                      type: 'bar',
                      data: {
                        labels: ['Courses', 'Requirements', 'Deadlines'],
                        datasets: [{
                          label: 'Data Completion',
                          data: [
                            data.filter(u => u.courses && u.courses[0] !== "Not found").length,
                            data.filter(u => u.admissions_requirements && u.admissions_requirements[0] !== "Not found").length,
                            data.filter(u => u.application_deadlines && u.application_deadlines[0] !== "Not found").length
                          ],
                          backgroundColor: ['rgba(54, 162, 235, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(255, 159, 64, 0.7)']
                        }]
                      },
                      options: {
                        scales: { y: { beginAtZero: true } }
                      }
                    });
                  });
              </script>
              <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            </body>
            </html>
            EOF
          fi
          
          # Create data directory and copy data
          mkdir -p vercel-dashboard/data
          cp data/admissions_data.json vercel-dashboard/data/
          
          # Create vercel.json configuration
          cat << EOF > vercel-dashboard/vercel.json
          {
            "name": "university-admissions-dashboard",
            "version": 2,
            "public": true,
            "cleanUrls": true,
            "trailingSlash": false
          }
          EOF
          
          echo "Dashboard prepared for Vercel deployment"
      
      - name: Upload dashboard as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vercel-dashboard
          path: vercel-dashboard
          retention-days: 7

  deploy-to-vercel:
    needs: scrape-and-prepare
    runs-on: ubuntu-latest
    
    steps:
      - name: Download dashboard artifact
        uses: actions/download-artifact@v4
        with:
          name: vercel-dashboard
          path: vercel-dashboard
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: vercel-dashboard
          
      - name: Output Vercel deployment URL
        run: |
          echo "Dashboard deployed to Vercel! ðŸš€"
          echo "Visit your project dashboard in Vercel to find the deployment URL"
